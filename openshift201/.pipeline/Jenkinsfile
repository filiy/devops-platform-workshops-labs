#!/usr/bin/env groovy

//comment
//ENV Vars
def TOOLS_NAMESPACE = "4zq6uj-filiy-ocp201-tst-tools"
def DEV_NAMESPACE = "4zq6uj-filiy-ocp201-tst-dev"
def PROD_NAMESPACE = "4zq6uj-filiy-ocp201-tst-prod"
def LOKI_SERVICE  = "loki"

//Pipeline
node {
            stage ('Deploy Loki to Dev'){
                dir ('simple_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki.yaml -p  NAME=${LOKI_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            def dc = openshift.selector('statefulset', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                        }
                    }

             }
            }
            stage ("Wait for Validation"){
                timeout (time: 20, unit: "MINUTES"){
                    input id: 'Approve01', message: 'Want to deploy to PROD?', ok: 'HANG TIGHT!'
                }
            }
            stage ('Deploy Loki to Prod'){
                dir ('simple_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki.yaml -p  NAME=${LOKI_SERVICE} | oc apply -f - -n ${PROD_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${PROD_NAMESPACE}") {
                            def dc = openshift.selector('statefulset', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                        }
                    }

             }
            }

    }

